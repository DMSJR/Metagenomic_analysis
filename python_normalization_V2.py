import sys

def parse_counts_file(counts_file):
    """Reads the count file generated by samtools idxstats and returns a dictionary {CDS_ID: (Length, Raw_Count)}."""
    cds_data = {}
    total_reads = 0

    with open(counts_file, 'r') as file:
        for line in file:
            cols = line.strip().split('\t')
            if len(cols) < 4:
                continue

            cds_id = cols[0]
            length = int(cols[1])
            raw_count = int(cols[2])

            cds_data[cds_id] = (length, raw_count)
            total_reads += raw_count

    return cds_data, total_reads

def normalize_counts(counts_file, output_file):
    """Normalizes CDS counts based on the same count file."""
    try:
        # 1. Get CDS lengths and raw counts
        cds_data, total_reads = parse_counts_file(counts_file)

        if total_reads == 0:
            raise ValueError("The total number of mapped reads is zero. Please check the count file.")

        # 2. Create the output file
        with open(output_file, 'w') as outfile:
            outfile.write("CDS\tLength\tRaw_Count\tNormalized_Count\n")

            for cds, (length, raw_count) in cds_data.items():
                if length == 0:
                    raise ValueError(f"CDS {cds} has zero length, which is not allowed.")

                # Calculate Normalized_Count: (Raw_Count * 1e9) / (Total_Reads * Length)
                normalized_count = (raw_count * 1e9) / (total_reads * length)

                outfile.write(f"{cds}\t{length}\t{raw_count}\t{normalized_count:.2f}\n")

        print(f"File '{output_file}' successfully created.")

    except FileNotFoundError as e:
        print(f"Error: File not found - {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py <counts_file.txt> <output_file.txt>")
    else:
        counts_file = sys.argv[1]
        output_file = sys.argv[2]
        normalize_counts(counts_file, output_file)
